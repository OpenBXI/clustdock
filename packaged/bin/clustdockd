#!/usr/bin/env python
# -*- coding: utf-8 -*-
###############################################################################
# Author : Antoine Sax <antoine.sax@bull.net>
# Contributors :
###############################################################################
'''Provides stuff to spawn a docker cluster well configured'''

from __future__ import print_function
import sys
import argparse
import os
import logging
import zmq
from zmq.devices import ThreadDevice
from configobj import ConfigObj
import signal
import signalfd
from multiprocessing import Process

import clustdock.server

CONFIG_FILE = "/etc/clustdockd.conf"
THREAD_SOCK = "ipc:///var/run/clustdock_dealer.sock"
# THREAD_SOCK = "ipc:///tmp/clustdock_dealer.sock"


def main(args):
    '''Main function'''
    _LOGGER.info("Starting server")
    try:
        profiles = args.cfg['profiles']
    except KeyError:
        _LOGGER.error("No 'profiles' section found in %s configuration file",
                      args.cfgfile)
        sys.exit(1)
    try:
        hosts = args.cfg['hosts']
    except KeyError:
        _LOGGER.error("No 'hosts' value found in %s configuration file",
                      args.cfgfile)
        sys.exit(1)

    hostlist = clustdock.server.extract_hosts(hosts)
    _LOGGER.debug("Managed hosts: %s", hostlist)

    fd = signalfd.signalfd(-1, [signal.SIGTERM], signalfd.SFD_CLOEXEC)
    signalfd.sigprocmask(signalfd.SIG_BLOCK, [signal.SIGTERM])

    td = ThreadDevice(zmq.QUEUE, zmq.ROUTER, zmq.DEALER)
    _LOGGER.debug("Trying to bind threadDevice to tcp://*:%s", args.port)
    td.bind_in('tcp://*:%s' % args.port)
    td.bind_out(THREAD_SOCK)
    td.setsockopt_in(zmq.IDENTITY, 'ROUTER')
    td.setsockopt_out(zmq.IDENTITY, 'DEALER')
    td.start()

    workers = []
    # Starting 5 workers
    for idx in xrange(0, 5):
        worker = clustdock.server.ClustdockWorker(THREAD_SOCK,
                                                  idx,
                                                  profiles,
                                                  hostlist,
                                                  args.cfg.get('docker_port', None))
        _LOGGER.debug("Starting worker %d", idx)
        proc = Process(target=worker.__class__.start,
                       args=(worker, args.loglevel, args.logfile))
        proc.start()
        workers.append(proc)

    # Entering main loop
    _LOGGER.debug("Entering main loop")
    with os.fdopen(fd) as fo:
        poller = zmq.Poller()
        poller.register(fo, zmq.POLLIN)
        while True:
            try:
                items = dict(poller.poll(1000))
                if fo.fileno() in items:
                    _LOGGER.debug("Signal received")
                    break

            except KeyboardInterrupt:
                break

    _LOGGER.info("Terminating workers")
    for worker in workers:
        worker.terminate()
    _LOGGER.info("Exiting server")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Stuff to deal with docker cluster')
    parser.add_argument('-p', '--port', help="Port to bind the deamon to",
                        default=5050)
    # Configuration file
    parser.add_argument("-c", "--cfgfile",
                        default=CONFIG_FILE,
                        help="Configuration file. default: %(default)s")
    # Logging level
    parser.add_argument('--loglevel', '-l', metavar='LEVEL',
        help='The log level to use', default=logging.WARNING)
    parser.add_argument('--logfile', '-f',
        type=argparse.FileType('w'),
        help='The logfile to use. Default sys.stdout', default=sys.stdout)
    _args = parser.parse_args()
    cfg = ConfigObj(_args.cfgfile, unrepr=True)
    _args.cfg = cfg
    logging.basicConfig(level=_args.loglevel,
        stream=_args.logfile,
        format="%(levelname)s|%(asctime)s|%(process)d|%(filename)s|%(funcName)s|%(lineno)d| %(message)s")
    _LOGGER = logging.getLogger()
    sys.exit(main(_args))
