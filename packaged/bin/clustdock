#!/usr/bin/env python
# -*- coding: utf-8 -*-
###############################################################################
# Author : Antoine Sax <antoine.sax@bull.net>
# Contributors :
###############################################################################
'''Provides stuff to spawn a docker cluster well configured'''

from __future__ import print_function
import sys
import argparse
import os
import logging
from configobj import ConfigObj
import clustdock.client

CONFIG_FILE = "/etc/clustdock.conf"
_LOGGER = logging.getLogger(__name__)
SERVER = "tcp://localhost:5050"


def main(args):
    '''Main function'''
    _LOGGER.debug("Entering main function")
    if hasattr(args, 'cfg'):
        server = args.cfg.get('SERVER_URL', SERVER)
    if args.server:
        server = args.server
    try:
        client = clustdock.client.ClustdockClient(server)
        func = getattr(client, args.cmd, None)
        if func is not None:
            return func(**vars(args))
        else:
            _LOGGER.debug("No function named %s", args.cmd)
            client.socket.close()
            return 1
    except KeyboardInterrupt:
        return 2
    finally:
        client.socket.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Stuff to deal with clustdock-server')
    parser.add_argument('-s', '--server',
                        help="Url of the clustdock-server")
    subparsers = parser.add_subparsers(title="sub-commands", dest="cmd")

    # spawn command
    parser_spawn = subparsers.add_parser("spawn",
                                         help="Spawn a docker cluster")
    parser_spawn.add_argument('profil',
                              help="Profil of nodes to spawn")
    parser_spawn.add_argument('clustername',
                              help="Name of the cluster")
    parser_spawn.add_argument('nb_nodes',
                              type=int,
                              nargs='?',
                              default=1,
                              help="Number of nodes. default: %(default)s")

    # stop command
    parser_stop = subparsers.add_parser("stop",
                                        help="Stop specified nodes")
    parser_stop.add_argument('nodeset',
                             help="Nodes to stop. (nodeset)")

    # get_ip command
    parser_get_ip = subparsers.add_parser("getip",
                                        help="Get @IP of specified nodes")
    parser_get_ip.add_argument('nodeset',
                             help="Node names (nodeset)")
    # list command
    parser_list = subparsers.add_parser("list",
                        help="List docker clusters already spawn on the network")

    # Configuration file
    parser.add_argument("-c", "--cfgfile",
                        default=CONFIG_FILE,
                        help="Configuration file. default: %(default)s")
    # Host
    parser.add_argument("-n", "--host",
                        default=None,
                        dest="host",
                        help="Host on which specifed action will be executed. Default is localhost.")
    # Logging level
    parser.add_argument('--loglevel', '-l',
                        metavar='LEVEL',
                        help='The log level to use',
                        default=logging.WARNING)

    _args = parser.parse_args()

    logging.basicConfig(level=_args.loglevel,
        format="%(levelname)s|%(asctime)s|%(process)d|%(filename)s|%(funcName)s|%(lineno)d| %(message)s")
    _LOGGER = logging.getLogger()

    # Load configuration
    if os.path.exists(_args.cfgfile):
        cfg = ConfigObj(_args.cfgfile)
        _args.cfg = cfg
    else:
        _LOGGER.debug("Configuration file not found. using defaults")

    sys.exit(main(_args))
